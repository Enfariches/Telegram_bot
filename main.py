import time
import telebot
from telebot import types
from datetime import datetime
import sqlite3
import random
import threading
import pytz

bot = telebot.TeleBot("5625878280:AAF4kWU1MXmuzn759huVQsWzTnG7b0tA1Jo")
timer = {}

markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
menubutton = ("–°–æ–∑–¥–∞—Ç—å‚úÖ", "–°—Ç–∞—Ç—É—Åüëè", "–£–¥–∞–ª–∏—Ç—åüõí", "–ü—É—Å–∫üèÅ")
markup.add(*menubutton)

start_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
startbutton = ("–°–æ–∑–¥–∞—Ç—å‚úÖ")
start_markup.add(startbutton)

choice_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
choicebutton = ("–û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è", "–í–µ—á–Ω–∞—è")
choice_markup.add(*choicebutton)


def database_work(message):
    connect = sqlite3.connect('database.db')
    cursor = connect.cursor()
    cursor.execute("""CREATE TABLE IF NOT EXISTS users(
        	id INTEGER UNIQUE,
        	first_name STRING,
        	last_name STRING,
        	username STRING,
        	reminder_time TEXT,
        	reminder_status STRING,
        	secret_answer STRING
        	)""")
    connect.commit()
    user_list = [message.chat.id, message.from_user.first_name, message.from_user.last_name,
                 message.from_user.username, None, '–ù–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∞', None]
    cursor.execute(f"INSERT OR IGNORE INTO users VALUES(?,?,?,?,?,?,?);", user_list)
    connect.commit()

def is_time_format(param):
    try:
        time.strptime(param, '%H:%M')
        return True
    except ValueError:
        return False

def open_base():
    with open('parser_list.txt', 'r', encoding='utf-8') as f:
        lst_gm = f.read().split("Z ")
    return lst_gm

@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.username} üëã \n\n–≠—Ç–æ—Ç —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–π –¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∞–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É—Ç—Ä–µ–Ω–Ω–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤–∞—à –¥–µ–Ω—å —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ –ø–æ–∑–∏—Ç–∏–≤–∞! "
                                      f"\n\n–û–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ —Å –ª–∞—Å–∫–æ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏, –ø–æ–∂–µ–ª–∞–Ω–∏—è–º–∏ –¥–æ–±—Ä–æ–≥–æ –¥–Ω—è –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ–π —Ü–∏—Ç–∞—Ç–æ–π."
                                      f" –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è, —á—Ç–æ–±—ã –æ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª–æ –≤–∞—à–µ–º—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é."
                                      f" \n\n–ë–ª–∞–≥–æ–¥–∞—Ä—è —ç—Ç–æ–º—É —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç—É, –≤—ã –±—É–¥–µ—Ç–µ –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ –ø—Ä–æ—Å—ã–ø–∞—Ç—å—Å—è —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é –≤ —Ç–æ–º, —á—Ç–æ –¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ –∂–¥–µ—Ç –≤–∞—Å! \n(_–û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–ø–∏—Å–∞–Ω–æ ChatGPT_)",
                     parse_mode="Markdown", reply_markup=start_markup)
    database_work(message)

@bot.message_handler(commands=['help'])
def help_message(message):
    bot.send_message(message.chat.id, "–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã: \n /help \n /start \n /secret", reply_markup=markup)

@bot.message_handler(commands=['secret'])
def secret_message(message):
    connect = sqlite3.connect('database.db')
    cursor = connect.cursor()
    cursor.execute(f"SELECT secret_answer FROM users WHERE id = {message.chat.id}")

    if cursor.fetchone()[0] is None:
        secret_msg = bot.send_message(message.chat.id, "–ö–æ–≥–æ —è –ª—é–±–ª—é? (1 –ø–æ–ø—ã—Ç–∫–∞)")
        bot.register_next_step_handler(secret_msg, secret_answer)
    else:
        bot.send_message(message.chat.id, "–ü–æ–ø—ã—Ç–∫–∞ –±—ã–ª–∞", reply_markup=markup)

def secret_answer(message):
    connect = sqlite3.connect('database.db')
    cursor = connect.cursor()
    cursor.execute(f"UPDATE users SET secret_answer = ? WHERE id = ?",
                   (message.text, message.chat.id))
    connect.commit()

    if message.text == '' or message.text == '':
        bot.send_message(message.chat.id, "", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–ù–µ–∞", reply_markup=markup)


@bot.message_handler(content_types=["text"])
def bot_message(message):
    if message.text == "–°–æ–∑–¥–∞—Ç—å‚úÖ":
        setup(message)
    if message.text == "–°—Ç–∞—Ç—É—Åüëè":
        status(message)
    if message.text == "–£–¥–∞–ª–∏—Ç—åüõí":
        delete(message)
    if message.text == "–ü—É—Å–∫üèÅ":
        msg = bot.send_message(message.chat.id, "–û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –∏–ª–∏ –í–µ—á–Ω–∞—è", reply_markup=choice_markup)
        bot.register_next_step_handler(msg, timer_start)


def status(message):
    connect = sqlite3.connect('database.db')
    cursor = connect.cursor()
    cursor.execute(f"SELECT reminder_time, reminder_status FROM users WHERE id = {message.chat.id}")
    result_status = cursor.fetchone()
    bot.send_message(message.chat.id, f'–í–∞—à–µ –≤—Ä–µ–º—è:\n{result_status[0]} - {result_status[1]}')



def setup(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ (–ß—á:–ú–º)")
    bot.register_next_step_handler(msg, add_to_base)


def add_to_base(message):

    if is_time_format(message.text):
        connect = sqlite3.connect('database.db')
        cursor = connect.cursor()
        cursor.execute(f"UPDATE users SET reminder_time = ?, reminder_status = ? WHERE id = ?",
                       (message.text, '–ù–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∞', message.chat.id))
        connect.commit()
        bot.send_message(message.chat.id, "–í–∞—à–µ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–Ω–æ",
                         reply_markup=markup)

    elif message.text == "–°—Ç–∞—Ç—É—Åüëè":
        bot_message(message)
    elif message.text == "–£–¥–∞–ª–∏—Ç—åüõí":
        bot_message(message)
    elif message.text == "–ü—É—Å–∫üèÅ":
        bot_message(message)
    elif message.text == '/start':
        start(message)

    else:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç",
                         reply_markup=start_markup)
        time.sleep(1)
        setup(message)


def delete(message):
    connect = sqlite3.connect('database.db')
    cursor = connect.cursor()
    cursor.execute(f"SELECT reminder_time FROM users WHERE id = {message.chat.id}")
    result = cursor.fetchone()

    time_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    time_markup.add(*result, "–û—Ç–º–µ–Ω–∞")

    msg = bot.send_message(message.chat.id, f"–£–¥–∞–ª–∏—Ç—å? \n", reply_markup=time_markup)
    bot.register_next_step_handler(msg, delete_to_base)


def delete_to_base(message):
    global timer
    connect = sqlite3.connect('database.db')
    cursor = connect.cursor()

    if is_time_format(message.text):
        cursor.execute("UPDATE users SET reminder_time = ? WHERE id = ?", (None, message.chat.id))
        connect.commit()
        try:
            if timer[message.chat.id]:
                timer[message.chat.id].cancel()
        except KeyError:
            pass
        bot.send_message(message.chat.id, "–£–¥–∞–ª–µ–Ω–æ", reply_markup=start_markup)
        setup(message)
    elif message.text == "–°—Ç–∞—Ç—É—Åüëè":
        bot_message(message)
    elif message.text == "–£–¥–∞–ª–∏—Ç—åüõí":
        bot_message(message)
    elif message.text == "–ü—É—Å–∫üèÅ":
        bot_message(message)
    elif message.text == '/start':
        bot_message(message)
    elif message.text == "–û—Ç–º–µ–Ω–∞":
        bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç", reply_markup=markup)
        time.sleep(1)
        delete(message)


def runtime(message):
    lst_gm = open_base()
    bot.send_message(message.chat.id, f"{lst_gm[random.randint(1, 390)] + ' ‚ù§Ô∏è'}", reply_markup=markup)
    if message.text == '–í–µ—á–Ω–∞—è':
        time.sleep(61)
        timer_start(message)
    else:
        connect = sqlite3.connect('database.db')
        cursor = connect.cursor()
        cursor.execute(f"UPDATE users SET reminder_time = ?, reminder_status = ? WHERE id = ?",
                       (None, '–ù–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∞', message.chat.id))
        connect.commit()
        bot.send_message(message.chat.id, "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä–µ–º—è", reply_markup=start_markup)

def timer_start(message):
    connect = sqlite3.connect('database.db')
    cursor = connect.cursor()
    cursor.execute("UPDATE users SET reminder_status = ? WHERE id = ?", (message.text, message.chat.id))
    connect.commit()
    cursor.execute(f"SELECT reminder_time FROM users WHERE id = {message.chat.id}")
    reminder_time = cursor.fetchone()[0]

    now = datetime.now(pytz.timezone('Asia/Yekaterinburg')).strftime("%H:%M")
    delta = datetime.strptime(reminder_time, "%H:%M") - datetime.strptime(now, "%H:%M")
    timer[message.chat.id] = threading.Timer(float(delta.seconds), runtime, [message])
    timer[message.chat.id].start()
    bot.send_message(message.chat.id, "–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω! üöÄ", reply_markup=markup)

bot.polling(none_stop=True)
