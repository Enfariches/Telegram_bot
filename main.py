import time
import telebot
from telebot import types
from datetime import datetime
import sqlite3
import random

bot = telebot.TeleBot("")
brain = {}

markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
startbutton = ("–°–æ–∑–¥–∞—Ç—å‚úÖ", "–°—Ç–∞—Ç—É—Åüëè", "–£–¥–∞–ª–∏—Ç—åüõí", "–ü—É—Å–∫üèÅ")
markup.add(*startbutton)

choice_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
choicebutton = ("–û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è", "–í–µ—á–Ω–∞—è")
choice_markup.add(*choicebutton)

def is_time_format(param):
    try:
        time.strptime(param, '%H:%M')
        return True
    except ValueError:
        return False

def valid_key(key):
    try:
        if brain[key] or brain[key] == []:
            return True
    except KeyError:
        return False

def open_base():
    with open('parser_list.txt', 'r') as f:
        lst_gm = f.read().split("% ")
    return lst_gm

@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.username} üëã \n\n–≠—Ç–æ—Ç —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–π –¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∞–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É—Ç—Ä–µ–Ω–Ω–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤–∞—à –¥–µ–Ω—å —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ –ø–æ–∑–∏—Ç–∏–≤–∞! "
                                      f"\n\n–û–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ —Å –ª–∞—Å–∫–æ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏, –ø–æ–∂–µ–ª–∞–Ω–∏—è–º–∏ –¥–æ–±—Ä–æ–≥–æ –¥–Ω—è –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ–π —Ü–∏—Ç–∞—Ç–æ–π."
                                      f" –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è, —á—Ç–æ–±—ã –æ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª–æ –≤–∞—à–µ–º—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é."
                                      f" \n\n–ë–ª–∞–≥–æ–¥–∞—Ä—è —ç—Ç–æ–º—É —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç—É, –≤—ã –±—É–¥–µ—Ç–µ –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ –ø—Ä–æ—Å—ã–ø–∞—Ç—å—Å—è —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é –≤ —Ç–æ–º, —á—Ç–æ –¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ –∂–¥–µ—Ç –≤–∞—Å! \n(_–û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–ø–∏—Å–∞–Ω–æ ChatGPT_)",
                     parse_mode="Markdown", reply_markup=markup)
    connect = sqlite3.connect('database.db')
    cursor = connect.cursor()
    cursor.execute("""CREATE TABLE IF NOT EXISTS users(
	id INTEGER UNIQUE,
	first_name STRING,
	last_name STRING,
	username STRING
	)""")
    connect.commit()
    user_list = [message.chat.id, message.from_user.first_name, message.from_user.last_name, message.from_user.username]
    cursor.execute(f"INSERT OR IGNORE INTO users VALUES(?,?,?,?);", user_list)
    connect.commit()

@bot.message_handler(content_types=["text"])
def bot_message(message):
    if message.text == "–°–æ–∑–¥–∞—Ç—å‚úÖ":
        setup(message)
    if message.text == "–°—Ç–∞—Ç—É—Åüëè":
        if valid_key(message.chat.id) and brain[message.chat.id] != []:
            status(message)
        else:
            bot.send_message(message.chat.id, f"–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–ª–æ–∫",
                             reply_markup=markup)
    if message.text == "–£–¥–∞–ª–∏—Ç—åüõí":
        if valid_key(message.chat.id) and brain[message.chat.id] != []:
            delete(message)
        else:
            bot.send_message(message.chat.id, f"–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–ª–æ–∫",
                             reply_markup=markup)
    if message.text == "–ü—É—Å–∫üèÅ":
        if valid_key(message.chat.id) and brain[message.chat.id] != []:
            msg = bot.send_message(message.chat.id, "–û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –∏–ª–∏ –í–µ—á–Ω–∞—è", reply_markup=choice_markup)
            bot.register_next_step_handler(msg, runtime)
        else:
            bot.send_message(message.chat.id, f"–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–ª–æ–∫",
                             reply_markup=markup)


def status(message):
    bot.send_message(message.chat.id, f'–í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∏:\n{", ".join(i for i in brain[message.chat.id])}',
                         reply_markup=markup)


def setup(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ (–ß—á:–ú–º)")
    bot.register_next_step_handler(msg, add_to_base)


def add_to_base(message):
    if is_time_format(message.text) and valid_key(message.chat.id) == False:
        brain[message.chat.id] = []
        brain[message.chat.id].append(message.text)
        bot.send_message(message.chat.id, "–í–∞—à–µ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–Ω–æ, "
                                          "–µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –µ—â—ë –æ–¥–Ω–æ –≤—Ä–µ–º—è –≤—ã–∑–æ–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–Ω–æ–≤–æ",
                         reply_markup=markup)

    elif is_time_format(message.text) and valid_key(message.chat.id):
        brain[message.chat.id].append(message.text)
        bot.send_message(message.chat.id, "–í–∞—à–µ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–Ω–æ –µ—â—ë, "
                                          "–µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –µ—â—ë –æ–¥–Ω–æ –≤—Ä–µ–º—è –≤—ã–∑–æ–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–Ω–æ–≤–æ",
                         reply_markup=markup)

    elif message.text == "–°—Ç–∞—Ç—É—Åüëè":
        bot_message(message)

    elif message.text == "–£–¥–∞–ª–∏—Ç—åüõí":
        bot_message(message)

    elif message.text == "–ü—É—Å–∫üèÅ":
        bot_message(message)

    elif message.text[0] == '/':
        bot_message(message)

    else:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ –≤–∞—à–µ –≤—Ä–µ–º—è —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ",
                         reply_markup=markup)
        time.sleep(1)
        setup(message)


def delete(message):
    time_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    timebutton = (i for i in brain[message.chat.id])
    time_markup.add(*timebutton, "–û—Ç–º–µ–Ω–∞")
    msg = bot.send_message(message.chat.id, f"–ö–∞–∫—É—é –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫—É —É–¥–∞–ª–∏—Ç—å? \n", reply_markup=time_markup)
    bot.register_next_step_handler(msg, delete_to_base)


def delete_to_base(message):
    if is_time_format(message.text) and valid_key(message.chat.id):
        brain[message.chat.id].remove(message.text)
        bot.send_message(message.chat.id, "–£—Å–ø–µ—à–Ω–æ", reply_markup=markup)
    elif message.text == "–°—Ç–∞—Ç—É—Åüëè":
        bot_message(message)
    elif message.text == "–£–¥–∞–ª–∏—Ç—åüõí":
        bot_message(message)
    elif message.text == "–ü—É—Å–∫üèÅ":
        bot_message(message)
    elif message.text[0] == '/':
        bot_message(message)
    elif message.text == "–û—Ç–º–µ–Ω–∞":
        bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ", reply_markup=markup)
        time.sleep(1)
        delete(message)


def runtime(message):
    choice = message.text
    if choice == '–û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è' or choice == '–í–µ—á–Ω–∞—è':
        bot.send_message(message.chat.id, "–ü—Ä–æ—Ü–µ—Å—Å –Ω–∞–ø–æ–º–∏–Ω–∞–ª–æ–∫ –∑–∞–ø—É—â–µ–Ω! üöÄ", reply_markup=markup)
        brain_sorted = sorted(brain[message.chat.id])
        lst_gm = open_base()
        while True:
            now = datetime.now().strftime("%H:%M")
            if brain_sorted[0] == now:
                if choice == '–û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è':
                    bot.send_message(message.chat.id, f"{lst_gm[random.randint(1, 390)] + ' ‚ù§Ô∏è'}", reply_markup=markup)
                    brain_sorted.pop(0)
                    brain[message.chat.id].pop(0)
                    if len(brain_sorted) != 0:
                        runtime(message)
                    bot.send_message(message.chat.id, "–ù–∞–ø–æ–º–∏–Ω–∞–ª–æ–∫ –±–æ–ª—å—à–µ –Ω–µ—Ç", reply_markup=markup)
                    break
                bot.send_message(message.chat.id, f"{lst_gm[random.randint(1, 390)] + ' ‚ù§Ô∏è'}", reply_markup=markup)
                time.sleep(61)
            brain_sorted = sorted(brain[message.chat.id])
            if len(brain_sorted) == 0:
                bot.send_message(message.chat.id, "–í—ã —É–¥–∞–ª–∏–ª–∏ –∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∏", reply_markup=markup)
                break
    else:
        bot_message(message)


bot.polling(none_stop=True)
